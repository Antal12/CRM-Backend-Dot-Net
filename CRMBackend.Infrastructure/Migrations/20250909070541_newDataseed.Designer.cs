// <auto-generated />
using System;
using CRM.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CRMBackend.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250909070541_newDataseed")]
    partial class newDataseed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CRM.Domain.Entities.AuditLog", b =>
                {
                    b.Property<int>("AuditLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditLogId"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AuditLogId");

                    b.HasIndex("UserId");

                    b.ToTable("AuditLogs");

                    b.HasData(
                        new
                        {
                            AuditLogId = 1,
                            Action = "Created",
                            Changes = "Added new customer ABC Corp",
                            EntityName = "Customer",
                            Timestamp = new DateTime(2025, 9, 9, 7, 5, 40, 956, DateTimeKind.Utc).AddTicks(14),
                            UserId = 1
                        },
                        new
                        {
                            AuditLogId = 2,
                            Action = "Updated",
                            Changes = "Changed lead status to Contacted",
                            EntityName = "Lead",
                            Timestamp = new DateTime(2025, 9, 9, 7, 5, 40, 956, DateTimeKind.Utc).AddTicks(18),
                            UserId = 2
                        },
                        new
                        {
                            AuditLogId = 3,
                            Action = "Deleted",
                            Changes = "Deleted quote with ID 3",
                            EntityName = "Quote",
                            Timestamp = new DateTime(2025, 9, 9, 7, 5, 40, 956, DateTimeKind.Utc).AddTicks(20),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("CRM.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<int>("AssignedToUserId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.HasIndex("AssignedToUserId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            AssignedToUserId = 1,
                            Email = "contact@abc.com",
                            Name = "ABC Corp",
                            Phone = ""
                        },
                        new
                        {
                            CustomerId = 2,
                            AssignedToUserId = 2,
                            Email = "info@xyz.com",
                            Name = "XYZ Ltd",
                            Phone = ""
                        },
                        new
                        {
                            CustomerId = 3,
                            AssignedToUserId = 3,
                            Email = "sales@techsoft.com",
                            Name = "TechSoft",
                            Phone = ""
                        });
                });

            modelBuilder.Entity("CRM.Domain.Entities.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InvoiceId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Invoices");

                    b.HasData(
                        new
                        {
                            InvoiceId = 1,
                            Amount = 1000m,
                            CreatedByUserId = 1,
                            CustomerId = 1,
                            Status = "Pending"
                        },
                        new
                        {
                            InvoiceId = 2,
                            Amount = 2000m,
                            CreatedByUserId = 2,
                            CustomerId = 2,
                            Status = "Paid"
                        },
                        new
                        {
                            InvoiceId = 3,
                            Amount = 3000m,
                            CreatedByUserId = 3,
                            CustomerId = 3,
                            Status = "Overdue"
                        });
                });

            modelBuilder.Entity("CRM.Domain.Entities.Lead", b =>
                {
                    b.Property<int>("LeadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeadId"));

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("LeadName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LeadId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Leads");

                    b.HasData(
                        new
                        {
                            LeadId = 1,
                            CreatedByUserId = 1,
                            CustomerId = 1,
                            LeadName = "",
                            Status = "New"
                        },
                        new
                        {
                            LeadId = 2,
                            CreatedByUserId = 2,
                            CustomerId = 2,
                            LeadName = "",
                            Status = "Contacted"
                        },
                        new
                        {
                            LeadId = 3,
                            CreatedByUserId = 3,
                            CustomerId = 3,
                            LeadName = "",
                            Status = "Qualified"
                        });
                });

            modelBuilder.Entity("CRM.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            NotificationId = 1,
                            CreatedAt = new DateTime(2025, 9, 9, 7, 5, 40, 956, DateTimeKind.Utc).AddTicks(53),
                            IsRead = false,
                            Message = "New Lead Assigned",
                            UserId = 1
                        },
                        new
                        {
                            NotificationId = 2,
                            CreatedAt = new DateTime(2025, 9, 9, 7, 5, 40, 956, DateTimeKind.Utc).AddTicks(62),
                            IsRead = false,
                            Message = "Invoice Paid",
                            UserId = 2
                        },
                        new
                        {
                            NotificationId = 3,
                            CreatedAt = new DateTime(2025, 9, 9, 7, 5, 40, 956, DateTimeKind.Utc).AddTicks(63),
                            IsRead = true,
                            Message = "Report Generated",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("CRM.Domain.Entities.Opportunity", b =>
                {
                    b.Property<int>("OpportunityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OpportunityId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("OpportunityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerUserId")
                        .HasColumnType("int");

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OpportunityId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("Opportunities");

                    b.HasData(
                        new
                        {
                            OpportunityId = 1,
                            CustomerId = 1,
                            OpportunityName = "",
                            OwnerUserId = 1,
                            Stage = "Prospecting"
                        },
                        new
                        {
                            OpportunityId = 2,
                            CustomerId = 2,
                            OpportunityName = "",
                            OwnerUserId = 2,
                            Stage = "Negotiation"
                        },
                        new
                        {
                            OpportunityId = 3,
                            CustomerId = 3,
                            OpportunityName = "",
                            OwnerUserId = 3,
                            Stage = "ClosedWon"
                        });
                });

            modelBuilder.Entity("CRM.Domain.Entities.Quote", b =>
                {
                    b.Property<int>("QuoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuoteId"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("OpportunityId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuoteId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OpportunityId");

                    b.ToTable("Quotes");

                    b.HasData(
                        new
                        {
                            QuoteId = 1,
                            Amount = 0m,
                            CreatedByUserId = 1,
                            CustomerId = 1,
                            OpportunityId = 1,
                            Status = "Draft"
                        },
                        new
                        {
                            QuoteId = 2,
                            Amount = 0m,
                            CreatedByUserId = 2,
                            CustomerId = 2,
                            OpportunityId = 2,
                            Status = "Sent"
                        },
                        new
                        {
                            QuoteId = 3,
                            Amount = 0m,
                            CreatedByUserId = 3,
                            CustomerId = 3,
                            OpportunityId = 3,
                            Status = "Approved"
                        });
                });

            modelBuilder.Entity("CRM.Domain.Entities.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("GeneratedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("ReportType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportId");

                    b.HasIndex("GeneratedByUserId");

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            ReportId = 1,
                            CreatedAt = new DateTime(2025, 9, 9, 7, 5, 40, 955, DateTimeKind.Utc).AddTicks(9957),
                            GeneratedByUserId = 1,
                            ReportType = "Sales",
                            Title = "Sales Report Q1"
                        },
                        new
                        {
                            ReportId = 2,
                            CreatedAt = new DateTime(2025, 9, 9, 7, 5, 40, 955, DateTimeKind.Utc).AddTicks(9966),
                            GeneratedByUserId = 2,
                            ReportType = "Financial",
                            Title = "Finance Report Q1"
                        },
                        new
                        {
                            ReportId = 3,
                            CreatedAt = new DateTime(2025, 9, 9, 7, 5, 40, 955, DateTimeKind.Utc).AddTicks(9967),
                            GeneratedByUserId = 3,
                            ReportType = "Customer",
                            Title = "Customer Report Q1"
                        });
                });

            modelBuilder.Entity("CRM.Domain.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "HR"
                        },
                        new
                        {
                            RoleId = 3,
                            RoleName = "User"
                        });
                });

            modelBuilder.Entity("CRM.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "admin@crm.com",
                            PasswordHash = new byte[] { 63, 4, 152, 152, 138, 146, 103, 42, 108, 99, 146, 184, 228, 28, 72, 161, 182, 159, 71, 35, 14, 167, 194, 91, 31, 50, 114, 107, 208, 187, 109, 184, 86, 56, 63, 141, 163, 14, 152, 3, 210, 189, 203, 26, 214, 38, 234, 130, 229, 171, 177, 10, 47, 61, 189, 220, 140, 102, 179, 95, 56, 210, 72, 255 },
                            PasswordSalt = new byte[] { 211, 203, 53, 250, 152, 215, 112, 124, 185, 6, 219, 131, 124, 204, 108, 154, 29, 40, 188, 217, 166, 178, 248, 109, 30, 152, 200, 95, 143, 72, 147, 227, 98, 244, 69, 19, 121, 240, 153, 146, 105, 99, 52, 4, 73, 210, 155, 57, 113, 66, 43, 151, 202, 184, 231, 118, 3, 18, 47, 98, 24, 190, 209, 41, 48, 237, 234, 88, 244, 140, 57, 196, 3, 21, 188, 173, 196, 45, 206, 221, 232, 106, 246, 19, 129, 226, 82, 67, 27, 12, 194, 206, 223, 170, 39, 202, 3, 89, 79, 98, 179, 217, 17, 142, 215, 231, 253, 94, 0, 208, 185, 64, 174, 116, 93, 110, 216, 219, 211, 43, 139, 25, 185, 192, 101, 225, 14, 206 },
                            UserName = "Admin User"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "hr@crm.com",
                            PasswordHash = new byte[] { 40, 162, 236, 75, 165, 241, 29, 127, 116, 29, 226, 236, 5, 201, 124, 200, 207, 21, 211, 146, 153, 113, 254, 12, 38, 196, 59, 50, 0, 192, 208, 247, 50, 202, 8, 164, 16, 169, 177, 12, 249, 214, 45, 120, 16, 0, 111, 15, 70, 142, 248, 74, 170, 108, 15, 9, 34, 155, 8, 185, 149, 231, 101, 114 },
                            PasswordSalt = new byte[] { 126, 14, 34, 155, 136, 225, 95, 222, 98, 122, 30, 61, 91, 141, 3, 192, 48, 109, 148, 119, 88, 34, 199, 207, 136, 198, 91, 180, 188, 113, 173, 224, 190, 84, 10, 82, 75, 86, 141, 35, 11, 17, 143, 71, 58, 134, 148, 12, 200, 59, 185, 86, 125, 126, 0, 223, 241, 81, 197, 193, 114, 68, 219, 51, 124, 83, 125, 127, 123, 38, 112, 49, 100, 152, 84, 37, 8, 249, 20, 81, 86, 227, 16, 188, 217, 39, 215, 34, 76, 91, 32, 83, 129, 88, 72, 69, 213, 152, 36, 67, 171, 31, 132, 44, 10, 138, 208, 20, 54, 87, 211, 160, 1, 108, 231, 155, 55, 43, 152, 26, 2, 169, 103, 167, 14, 101, 11, 159 },
                            UserName = "HR Manager"
                        },
                        new
                        {
                            UserId = 3,
                            Email = "user@crm.com",
                            PasswordHash = new byte[] { 187, 248, 110, 81, 120, 21, 138, 159, 68, 160, 6, 174, 243, 52, 157, 65, 50, 175, 140, 78, 251, 185, 177, 253, 120, 239, 26, 206, 143, 109, 43, 142, 90, 211, 39, 163, 92, 119, 129, 174, 31, 121, 208, 58, 151, 201, 30, 177, 78, 204, 105, 181, 100, 61, 141, 127, 49, 133, 85, 141, 80, 143, 134, 34 },
                            PasswordSalt = new byte[] { 35, 231, 162, 121, 88, 161, 234, 82, 218, 139, 130, 24, 54, 70, 59, 241, 125, 120, 199, 40, 123, 44, 165, 80, 215, 63, 14, 172, 74, 66, 52, 232, 93, 231, 84, 210, 219, 101, 250, 184, 167, 220, 25, 212, 229, 157, 0, 103, 40, 142, 169, 60, 36, 233, 146, 2, 3, 208, 194, 28, 100, 16, 63, 175, 88, 16, 203, 68, 202, 227, 238, 236, 163, 195, 179, 212, 36, 100, 192, 136, 7, 197, 124, 73, 10, 196, 104, 50, 4, 122, 190, 92, 105, 123, 22, 197, 151, 198, 206, 153, 234, 40, 136, 149, 22, 85, 94, 56, 66, 128, 152, 29, 189, 253, 204, 175, 69, 44, 128, 101, 196, 51, 165, 181, 241, 85, 95, 198 },
                            UserName = "Normal User"
                        });
                });

            modelBuilder.Entity("CRM.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("CRM.Domain.Entities.AuditLog", b =>
                {
                    b.HasOne("CRM.Domain.Entities.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CRM.Domain.Entities.Customer", b =>
                {
                    b.HasOne("CRM.Domain.Entities.User", "AssignedToUser")
                        .WithMany("Customers")
                        .HasForeignKey("AssignedToUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedToUser");
                });

            modelBuilder.Entity("CRM.Domain.Entities.Invoice", b =>
                {
                    b.HasOne("CRM.Domain.Entities.User", "CreatedByUser")
                        .WithMany("Invoices")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CRM.Domain.Entities.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CRM.Domain.Entities.Lead", b =>
                {
                    b.HasOne("CRM.Domain.Entities.User", "CreatedByUser")
                        .WithMany("Leads")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CRM.Domain.Entities.Customer", "Customer")
                        .WithMany("Leads")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CRM.Domain.Entities.Notification", b =>
                {
                    b.HasOne("CRM.Domain.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CRM.Domain.Entities.Opportunity", b =>
                {
                    b.HasOne("CRM.Domain.Entities.Customer", "Customer")
                        .WithMany("Opportunities")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CRM.Domain.Entities.User", "OwnerUser")
                        .WithMany("Opportunities")
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("OwnerUser");
                });

            modelBuilder.Entity("CRM.Domain.Entities.Quote", b =>
                {
                    b.HasOne("CRM.Domain.Entities.User", "CreatedByUser")
                        .WithMany("Quotes")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CRM.Domain.Entities.Customer", "Customer")
                        .WithMany("Quotes")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CRM.Domain.Entities.Opportunity", "Opportunity")
                        .WithMany("Quotes")
                        .HasForeignKey("OpportunityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Customer");

                    b.Navigation("Opportunity");
                });

            modelBuilder.Entity("CRM.Domain.Entities.Report", b =>
                {
                    b.HasOne("CRM.Domain.Entities.User", "GeneratedByUser")
                        .WithMany("Reports")
                        .HasForeignKey("GeneratedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GeneratedByUser");
                });

            modelBuilder.Entity("CRM.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("CRM.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRM.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CRM.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Leads");

                    b.Navigation("Opportunities");

                    b.Navigation("Quotes");
                });

            modelBuilder.Entity("CRM.Domain.Entities.Opportunity", b =>
                {
                    b.Navigation("Quotes");
                });

            modelBuilder.Entity("CRM.Domain.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("CRM.Domain.Entities.User", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("Customers");

                    b.Navigation("Invoices");

                    b.Navigation("Leads");

                    b.Navigation("Notifications");

                    b.Navigation("Opportunities");

                    b.Navigation("Quotes");

                    b.Navigation("Reports");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
